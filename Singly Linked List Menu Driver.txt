#include<bits/stdc++.h>
using namespace std;
class Node
{
  public:
  int data;
  Node *next;
};
Node *create(Node *p,int a[],int n)
{
  Node *t,*last;
  p=new Node();
  p->data=a[0];
  p->next=NULL;
  last = p;
  for(int i=1;i<n;i++)
  {
    t=new Node();
    t->data=a[i];
    t->next=NULL;
    last->next=t;
    last = t;
  }
  return p;
}
void display(Node *p)
{
  while(p!=NULL)
  {
    cout<<p->data<<" ";
    p=p->next;
  }
}
void Rdisplay(Node *p)
{
  if(p!=NULL)
  {
    cout<<p->data<<" ";
    Rdisplay(p->next);
  }
}
void revdisplay(Node *p)
{
  if(p!=NULL)
  {
    revdisplay(p->next);
    cout<<p->data<<" ";
  }
}
int count(Node *p)
{
  int a=0;
  while(p)
  { 
    a=a+1;
    p=p->next;
  }
  return a;
}
int Rcount(Node *p)
{
  if(p!=NULL)
  { 
    return Rcount(p->next)+1;
  }
  else return 0;
}
int add(Node *p)
{
  int a=0;
  while(p)
  { 
    a=a+p->data;
    p=p->next;
  }
  return a;
}
int Radd(Node *p)
{
  if(p!=NULL)
  { 
    return Radd(p->next)+p->data;
  }
  else return 0;
}
int max(Node *p)
{
  int x=-INT_MIN;
  while(p)
  {
  if(p->data>x)
  {
    x=p->data;
  }
      p=p->next;
  }
  return x;
}
int min(Node *p)
{
  int x=INT_MAX;
  while(p)
  {
  if(p->data<x)
  {
    x=p->data;
  }
  p=p->next;
  }
  return x;
}
int Rmax(Node*p)
{
  int x=0;
  if(p==NULL)
  {
    return INT_MIN;
  }
  else
  {
    x=Rmax(p->next);
    if(x>p->data)
    {
      return x; 
    }
    else return p->data;
  }
}
int Rmin(Node*p)
{
  int x=0;
  if(p==NULL)
  {
    return INT_MAX;
  }
  else
  {
    x=Rmin(p->next);
    if(x<p->data)
    {
      return x; 
    }
    else return p->data;
  }
}
Node *Search(Node*p,int k)
{
  if(p==NULL)
  {
    return NULL;
  }
  else
  {
    while(p)
    {
      if(p->data==k)
      {
        return p;
      }
      p=p->next;
    }
  }
}
Node *RSearch(Node *p,int k)
{
  if(p==NULL) return NULL;
  else
  {
    if(p->data==k)
    {
      return p;
    }
    return RSearch(p->next,k);
  }
}
//Node *ISearch(Node*p,int k)
//{
  //if(p==NULL) return NULL;
  //else
  //{
    //Node *q = NULL;
    //while(p)
    //{
      //if(p->data==k)
      //{
        //q->next=p->next;
        //p->next=first;
        //first=p;
        //return p;
      //}
      //q=p;
      //p=p->next;
    //}
  //}
//}
void insert(Node *p,int pos,int data)
{
  Node *q,*t;
  q=p;
  if(pos<0 || pos>count(q))
  return;
  t=new Node();
  t->data=data;
  if(pos==0)
  {
    t->next=q;
    q=t;
  }
  else
  {
    for(int i=0;i<pos-1;i++)
    {
      q=q->next;
    }
    t->next=q->next;
    q->next=t;
  }
}
void isl(Node *p,int x)
{
  Node *q=NULL;
  while(p && p->data<x)
  {
    q=p;
    p=p->next;
  }
  Node *t=new Node();
  t->data=x;
  t->next=q->next;
  q->next=t;
}
int del(Node *p,int pos)
{
  Node *q,*t;
  int x;
  if(pos==1)
  {
    q=p;
    t=q;
    q=q->next;
    x=t->data;
    delete(t);
  }
  else
  {
    q=p;
    t=NULL;
    for(int i=0;i<pos-1;i++)
    {
      t=q;
      q=q->next;
    }
    t->next=q->next;
    x=q->data;
    delete(q);
  }
  return x;
}
int sorted(Node *p)
{
  int x=INT_MIN;
  while(p)
  {
    if(p->data<x)
    {
      return 0;
    }
    x=p->data;
    p=p->next;
  }
  return 1;
}
void dup(Node *p)
{
  Node *q;
  q=p->next;
  while(q)
  {
    if(p->data!=q->data)
    {
      p=q;
      q=q->next;
    }
    else
    {
      p->next=q->next;
      delete(q);
      q=p->next;
    }
  }
}
void reverse(Node *p)
{
  int n=count(p);
  int a[n];
  Node *q=p;
  for(int i=0;i<n;i++)
  {
    a[i]=q->data;
    q=q->next;
  }
  q=p;
  for(int i=n-1;i>=0;i--)
  {
    q->data=a[i];
    q=q->next;
  }
}
Node *sprev(Node *p)
{
  Node *q,*r,*s;
  q=p;
  r=NULL;
  s=NULL;
  while(q!=NULL)
  {
    s=r;
    r=q;
    q=q->next;
    r->next=s;
  }
  p=r;
  return (p);
}
void recrev(Node*q,Node *r)
{
  static Node *p=r;
  if(p!=NULL)
  {
    recrev(p,p->next);
    p->next=q;
  }
  else
  {
    r=q;
  }
}
void conc(Node *p,Node *q)
{
  Node *last;
  last=p;
  while(last->next!=NULL)
  {
    last=last->next;
  }
  last->next=q; 
}
Node *merge(Node *p,Node *q)
{
  Node *third,*last;
  third=NULL;
  last=NULL;
  if(p->data<q->data)
  {
    third=p;
    last=p;
    p=p->next;
    last->next=NULL;
  }
  else
  {
    third=q;
    last=q;
    q=q->next;
    last->next=NULL;
  }
  while(p && q)
  {
   if(p->data<q->data)
  {
    last->next=p;
    last=p;
    p=p->next;
    last->next=NULL;
  }
  else
  {
    last->next=q;
    last=q;
    q=q->next;
    last->next=NULL;
  }
  }
  if(p!=NULL) last->next=p;
  else last->next=q;
  return third;
}
int isloop(Node *f)
{
  Node *p,*q;
  p=f;
  q=f;
  do
  {
    p=p->next;
    q=q->next;
    if(q!=NULL)
    {
      q=q->next;
    }
  }while(p && q && p!=q);
  if(p==q)return 1;
  return 0;
}
int main()
{
  int A[5]={1,3,5,7,9},B[5]={2,4,6,8,10};
  Node *first,*second,*third,*t1,*t2;
  first=create(first,A,5);
  /*t1=first->next->next;
  t2=first->next->next->next->next;
  t2->next=t1;
  */
  display(first);
  //second=create(second,B,5);
  cout<<endl;
  /*Rdisplay(first);
  cout<<endl;
  revdisplay(first);
  cout<<endl;
  cout<<count(first);
  cout<<endl;
  cout<<Rcount(first);
  cout<<endl;
  cout<<add(first);
  cout<<endl;
  cout<<max(first);
  cout<<endl;
  cout<<min(first);
  cout<<endl;
  cout<<Rmax(first);
  cout<<endl;
  cout<<Rmin(first);
  cout<<endl;
  cout<<Radd(first)<<endl;
  Node *t=Search(first,3);
  Node *l=RSearch(first,2);
  cout<<t->data<<" "<<l->data<<endl;
  insert(first,5,7);
  display(first);
  cout<<endl;
  isl(first,6);
  display(first);
  cout<<endl;
  del(first,6);
  display(first);
  cout<<endl<<sorted(first)<<endl;
  dup(first);
  display(first);
  
  reverse(first);
  display(first);
  reverse(first);
  first=sprev(first);
  display(first);
  recrev(NULL,first);
  display(first);
  third=merge(first,second);
  display(third);
  cout<<isloop(first);
  */ 
  first =sprev(first);
  display(first);
}